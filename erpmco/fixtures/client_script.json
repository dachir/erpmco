[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-04-29 10:23:06.533596",
  "module": "Erpmco",
  "name": "Delivery Note Select Allocated Items",
  "script": "frappe.ui.form.on('Delivery Note', {\r\n    refresh(frm) {\r\n        // Remove the existing \"Sales Order\" button\r\n        frm.remove_custom_button(__('Sales Order'), __('Get Items From'));\r\n\r\n        // Add the new \"Fetch Reserved Batches\" button\r\n        frm.add_custom_button(\r\n            __('Sales Order11'),\r\n            function () {\r\n                frappe.call({\r\n                    method: 'erpmco.overrides.delivery_note.fetch_reserved_stock',\r\n                    args: { customer: frm.doc.customer },\r\n                    callback: function (response) {\r\n                        if (response.message && response.message.length > 0) {\r\n                            const data = response.message;\r\n\r\n                            // Create the dialog\r\n                            const dialog = new frappe.ui.Dialog({\r\n                                title: __('Select Reserved Batches'),\r\n                                fields: [\r\n                                    {\r\n                                        fieldname: 'filters_section',\r\n                                        fieldtype: 'Section Break',\r\n                                        label: 'Filters'\r\n                                    },\r\n                                    {\r\n                                        fieldname: 'search_sales_order',\r\n                                        fieldtype: 'Link',\r\n                                        options: 'Sales Order',\r\n                                        label: 'Sales Order',\r\n                                        onchange: function () {\r\n                                            filterTable(dialog);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        fieldtype: 'Column Break'\r\n                                    },\r\n                                    {\r\n                                        fieldname: 'search_item_code',\r\n                                        fieldtype: 'Link',\r\n                                        options: 'Item',\r\n                                        label: 'Item Code',\r\n                                        onchange: function () {\r\n                                            filterTable(dialog);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        fieldtype: 'Section Break'\r\n                                    },\r\n                                    {\r\n                                        fieldname: 'batch_selection',\r\n                                        fieldtype: 'Table',\r\n                                        label: 'Reserved Batches',\r\n                                        cannot_add_rows: true,\r\n                                        in_place_edit: true,\r\n                                        reqd: 1,\r\n                                        data: [],\r\n                                        fields: [\r\n                                            {\r\n                                                fieldtype: 'Data',\r\n                                                fieldname: 'sales_order_item',\r\n                                                label: 'SO id',\r\n                                                read_only: 1,\r\n                                                in_list_view: 0,\r\n                                            },\r\n                                            {\r\n                                                fieldtype: 'Data',\r\n                                                fieldname: 'warehouse',\r\n                                                label: 'Warehouse',\r\n                                                read_only: 1,\r\n                                                in_list_view: 0,\r\n                                            },\r\n                                            {\r\n                                                fieldtype: 'Data',\r\n                                                fieldname: 'stock_reservation_entry',\r\n                                                label: 'Stock Reservation Entry',\r\n                                                read_only: 1,\r\n                                                in_list_view: 0,\r\n                                            },\r\n                                            {\r\n                                                fieldtype: 'Float',\r\n                                                fieldname: 'conversion_factor',\r\n                                                label: 'Conversion Factor',\r\n                                                read_only: 1,\r\n                                                in_list_view: 0,\r\n                                            },\r\n                                            {\r\n                                                fieldtype: 'Data',\r\n                                                fieldname: 'uom',\r\n                                                label: 'UOM',\r\n                                                read_only: 1,\r\n                                                in_list_view: 0,\r\n                                            },\r\n                                            {\r\n                                                fieldtype: 'Data',\r\n                                                fieldname: 'stock_uom',\r\n                                                label: 'Stock UOM',\r\n                                                read_only: 1,\r\n                                                in_list_view: 0,\r\n                                            },\r\n                                            {\r\n                                                fieldtype: 'Data',\r\n                                                fieldname: 'sales_order',\r\n                                                label: 'Sales Order',\r\n                                                read_only: 1,\r\n                                                in_list_view: 1,\r\n                                                //width: '70%',\r\n                                            },\r\n                                            {\r\n                                                fieldtype: 'Data',\r\n                                                fieldname: 'item_code',\r\n                                                label: 'Item Code',\r\n                                                read_only: 1,\r\n                                                in_list_view: 1,\r\n                                                //width: '20%',\r\n                                            },\r\n                                            {\r\n                                                fieldtype: 'Float',\r\n                                                fieldname: 'qty',\r\n                                                label: 'Quantity',\r\n                                                read_only: 1,\r\n                                                in_list_view: 1,\r\n                                                //width: '10%',\r\n                                            },\r\n                                        ],\r\n                                    },\r\n                                ],\r\n                                primary_action_label: __('Create Delivery Note'),\r\n                                primary_action: function (values) {\r\n                                    const selected_batches = values.batch_selection.filter(x => x.__checked);\r\n\r\n                                    // Call the reusable function\r\n                                    processSelectedBatches(frm, selected_batches, dialog);\r\n                                },\r\n                            });\r\n\r\n                            // Populate table with data\r\n                            const table_field = dialog.fields_dict.batch_selection.df.data;\r\n                            data.forEach((row) => {\r\n                                table_field.push({\r\n                                    sales_order_item: row.sales_order_item,\r\n                                    qty: row.qty,\r\n                                    stock_qty: row.stock_qty,\r\n                                    warehouse: row.warehouse,\r\n                                    item_code: row.item_code,\r\n                                    sales_order: row.sales_order,\r\n                                    stock_reservation_entry: row.stock_reservation_entry,\r\n                                    conversion_factor: row.custom_conversion_factor,\r\n                                    uom: row.custom_uom,\r\n                                    stock_uom: row.stock_uom,\r\n                                });\r\n                            });\r\n\r\n                            dialog.fields_dict.batch_selection.grid.refresh(); // Refresh table\r\n                            \r\n                            // Filter sales order by customer in the dialog\r\n                            dialog.fields_dict.search_sales_order.get_query = function() {\r\n                                return {\r\n                                    filters: {\r\n                                        customer: frm.doc.customer,\r\n                                        status: ['not in', ['Closed', 'Completed']],\r\n                                    }\r\n                                };\r\n                            };\r\n\r\n\r\n                            // Show the dialog\r\n                            dialog.show();\r\n                            // Add a special class to this dialog only\r\n                            setTimeout(() => {\r\n                                const dialogWrapper = dialog.$wrapper.get(0);\r\n                            \r\n                                if (dialogWrapper) {\r\n                                    // 1. Apply flex on body rows\r\n                                    const bodyDataRows = dialogWrapper.querySelectorAll('.grid-body .grid-row .data-row');\r\n                                    bodyDataRows.forEach(row => {\r\n                                        row.style.display = 'flex';\r\n                                        row.style.alignItems = 'center';\r\n                                    });\r\n                            \r\n                                    // 2. Hide Delete buttons cleanly\r\n                                    const deleteBtn = dialogWrapper.querySelector('.grid-remove-rows');\r\n                                    const deleteAllBtn = dialogWrapper.querySelector('.grid-remove-all-rows');\r\n                            \r\n                                    if (deleteBtn) {\r\n                                        deleteBtn.style.display = 'none'; // HIDE Delete Selected\r\n                                    }\r\n                            \r\n                                    if (deleteAllBtn) {\r\n                                        deleteAllBtn.style.display = 'none'; // HIDE Delete All\r\n                                    }\r\n                            \r\n                                    // 3. Adjust column widths inside the dialog\r\n                                    const style = document.createElement('style');\r\n                                    style.innerHTML = `\r\n                                        .reserved-stock-dialog .grid-body .grid-row .col:nth-child(3) {\r\n                                            flex: 0 0 60% !important;\r\n                                            max-width: 60% !important;\r\n                                        }\r\n                                        .reserved-stock-dialog .grid-body .grid-row .col:nth-child(4) {\r\n                                            flex: 0 0 20% !important;\r\n                                            max-width: 20% !important;\r\n                                        }\r\n                                        .reserved-stock-dialog .grid-body .grid-row .col:nth-child(5) {\r\n                                            flex: 0 0 10% !important;\r\n                                            max-width: 10% !important;\r\n                                        }\r\n                                    `;\r\n                                    document.head.appendChild(style);\r\n                                }\r\n                            }, 200); // Wait 200ms to make sure rows exist\r\n                        } else {\r\n                            frappe.msgprint(__('No reserved batches available.'));\r\n                        }\r\n                    },\r\n                });\r\n            },\r\n            __('Get Items From')\r\n        );\r\n    },\r\n});\r\n\r\nfunction filterTable(dialog) {\r\n    const salesOrderFilter = dialog.get_value('search_sales_order')?.toLowerCase() || \"\";\r\n    const itemCodeFilter = dialog.get_value('search_item_code')?.toLowerCase() || \"\";\r\n\r\n    const grid = dialog.fields_dict.batch_selection.grid;\r\n\r\n    grid.wrapper.find('.grid-row').each(function () {\r\n        const row = $(this);\r\n        const salesOrder = row.find('[data-fieldname=\"sales_order\"] .static-area').text().toLowerCase();\r\n        const itemCode = row.find('[data-fieldname=\"item_code\"] .static-area').text().toLowerCase();\r\n\r\n        const matchSalesOrder = salesOrder.includes(salesOrderFilter);\r\n        const matchItemCode = itemCode.includes(itemCodeFilter);\r\n\r\n        if ((salesOrderFilter && !matchSalesOrder) || (itemCodeFilter && !matchItemCode)) {\r\n            row.hide();\r\n        } else {\r\n            row.show();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Process selected batches and update the Delivery Note\r\n * @param {Object} frm - Current form instance\r\n * @param {Array} selected_batches - Array of selected batch objects\r\n * @param {Object} dialog - Dialog instance (optional)\r\n */\r\nfunction processSelectedBatches(frm, selected_batches, dialog) {\r\n    if (selected_batches && selected_batches.length > 0) {\r\n        frappe.call({\r\n            method: 'erpmco.overrides.delivery_note.get_delivery_note_items_from_reserved_stock',\r\n            args: { doc: cur_frm.doc,details: selected_batches },\r\n            callback: function (r) {\r\n                if (r.message) {\r\n                    const { items, taxes_and_charges, taxes } = r.message;\r\n                    \r\n                    // Clear existing items\r\n                    frm.clear_table('items');\r\n\r\n                    // Add items\r\n                    items.forEach((item) => {\r\n                        const row = frm.add_child('items');\r\n                        Object.keys(item).forEach((key) => {\r\n                            console.log(\"######\");\r\n                            console.log(key);\r\n                            console.log(item[key]);\r\n                            row[key] = item[key];\r\n                        });\r\n                        //frappe.throw(\"OK\");\r\n                    });\r\n\r\n                    // Set taxes and charges, if any\r\n                    if (taxes_and_charges) {\r\n                        frm.set_value('taxes_and_charges', taxes_and_charges);\r\n                        frm.clear_table('taxes');\r\n                        taxes.forEach((tax) => {\r\n                            const row = frm.add_child('taxes');\r\n                            Object.keys(tax).forEach((key) => {\r\n                                row[key] = tax[key];\r\n                            });\r\n                        });\r\n                        frm.refresh_field('taxes');\r\n                    }\r\n\r\n                    // Refresh the items field\r\n                    frm.refresh_field('items');\r\n\r\n                    // Close the dialog if provided\r\n                    if (dialog) {\r\n                        dialog.hide();\r\n                    }\r\n\r\n                    frappe.msgprint(__('Delivery Note Items and Taxes have been added.'));\r\n                } else {\r\n                    frappe.msgprint(__('Failed to retrieve Delivery Note Items and Taxes.'));\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        frappe.msgprint(__('No batches selected.'));\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2025-02-07 13:04:29.572123",
  "module": "Erpmco",
  "name": "Work Order Get Stock Quantity",
  "script": "frappe.ui.form.on('Work Order', {\r\n    production_item: function (frm) {\r\n        // Fetch the item group for the selected production_item and set custom_manufacture_uom\r\n        if (frm.doc.production_item) {\r\n            frappe.db.get_value('Item', frm.doc.production_item, 'item_group', (r) => {\r\n                if (r && r.item_group) {\r\n                    // Check if the item group is \"FG\"\r\n                    if (r.item_group === 'FG' && !(frm.doc.item_name.toLowerCase().includes('loose') || frm.doc.item_name.includes('PFAD90RPKO10'))) {\r\n                        frm.set_value('custom_manufacture_uom', 'CT'); // Set to \"CT\" for FG\r\n                    } \r\n                    else {\r\n                        // Set to stock_uom for other item groups\r\n                        frappe.db.get_value('Item', frm.doc.production_item, 'stock_uom', (uom) => {\r\n                            if (uom && uom.stock_uom) {\r\n                                frm.set_value('custom_manufacture_uom', uom.stock_uom);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n    custom_qty_manufacture_: function (frm) {\r\n        if (frm.doc.custom_qty_manufacture_ && frm.doc.custom_manufacture_uom && frm.doc.production_item) {\r\n            frappe.call({\r\n                method: 'erpmco.overrides.work_order.get_converted_qty',\r\n                args: {\r\n                    item_code: frm.doc.production_item,\r\n                    uom: frm.doc.custom_manufacture_uom,\r\n                    qty: frm.doc.custom_qty_manufacture_\r\n                },\r\n                callback: function (r) {\r\n                    if (r.message) {\r\n                        frm.set_value('qty', r.message); // Set the converted qty\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2024-12-15 04:49:16.176329",
  "module": "Erpmco",
  "name": "Stock Entry Set Weight",
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\nfrappe.ui.form.on('Stock Entry Detail', {\n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.item_code) {\n            frappe.db.get_doc('Item', row.item_code)\n                .then(item_doc => {\n                    row.custom_weight_per_unit = item_doc.weight_per_unit;\n                    row.custom_weight_uom = item_doc.custom_weight_uom;\n                });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2024-12-31 16:43:46.522473",
  "module": "Erpmco",
  "name": "Work Order Fetch Operations",
  "script": "frappe.ui.form.on('Work Order', {\n\tcustom_routing_name: function (frm) {\n        if (frm.doc.custom_routing_name) {\n            frappe.call({\n                method: \"erpmco.overrides.work_order.fetch_operations\",\n                args: {\n                    routing_name: frm.doc.custom_routing_name\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.clear_table(\"operations\");\n                        r.message.forEach((row) => {\n                            let child = frm.add_child(\"operations\");\n                            child.operation = row.operation;\n                            child.workstation = row.workstation;\n                            child.time_in_mins = row.time_in_mins * frm.doc.qty;\n                            child.bom = frm.doc.bom_no;\n                        });\n                        frm.refresh_field(\"operations\");\n                    }\n                }\n            });\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-02-13 17:58:16.671780",
  "module": "Erpmco",
  "name": "Make Rate and Taxe Amount editable",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('Purchase Taxes and Charges', {\n    charge_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.charge_type === 'On Net Total') {\n            // Open row editor and enable fields\n            let grid_row = frm.fields_dict[\"taxes\"].grid.get_row(cdn);\n            if (grid_row) {\n                grid_row.toggle_editable(\"rate\", true);\n                grid_row.toggle_editable(\"tax_amount\", true);\n            }\n            \n            //frappe.model.set_value(tax.doctype, tax.name, \"rate\", tax.rate);\n            \n            //frappe.model.set_value(cdt, cdn, \"tax_amount\", 0);\n            //frm.refresh_field(\"tax_amount\");\n        }\n    },\n    \n    tax_amount: function(frm, cdt, cdn) {\n        let tax = locals[cdt][cdn];\n        if (tax.charge_type === 'On Net Total') {\n            \n            let net_total = frm.doc.net_total || 1; // Avoid division by zero\n            let new_rate = (tax.tax_amount / net_total) * 100;\n    \n            // Update only the tax_rate field\n            frappe.model.set_value(cdt, cdn, \"rate\", new_rate);\n            frm.refresh_field(\"rate\"); // Refresh only tax_rate\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-02-13 18:03:31.133203",
  "module": "Erpmco",
  "name": "Purchase Invoice Make Rate and Taxe Amount editable",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('Purchase Taxes and Charges', {\n    charge_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.charge_type === 'On Net Total') {\n            // Open row editor and enable fields\n            let grid_row = frm.fields_dict[\"taxes\"].grid.get_row(cdn);\n            if (grid_row) {\n                grid_row.toggle_editable(\"rate\", true);\n                grid_row.toggle_editable(\"tax_amount\", true);\n            }\n            \n            //frappe.model.set_value(tax.doctype, tax.name, \"rate\", tax.rate);\n            \n            //frappe.model.set_value(cdt, cdn, \"tax_amount\", 0);\n            //frm.refresh_field(\"tax_amount\");\n        }\n    },\n    \n    tax_amount: function(frm, cdt, cdn) {\n        let tax = locals[cdt][cdn];\n        if (tax.charge_type === 'On Net Total') {\n            \n            let net_total = frm.doc.net_total || 1; // Avoid division by zero\n            let new_rate = (tax.tax_amount / net_total) * 100;\n    \n            // Update only the tax_rate field\n            frappe.model.set_value(cdt, cdn, \"rate\", new_rate);\n            frm.refresh_field(\"rate\"); // Refresh only tax_rate\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-02-13 18:05:52.593712",
  "module": "Erpmco",
  "name": "Purchase Order Make Rate and Taxe Amount editable",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('Purchase Taxes and Charges', {\n    charge_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.charge_type === 'On Net Total') {\n            // Open row editor and enable fields\n            let grid_row = frm.fields_dict[\"taxes\"].grid.get_row(cdn);\n            if (grid_row) {\n                grid_row.toggle_editable(\"rate\", true);\n                grid_row.toggle_editable(\"tax_amount\", true);\n            }\n            \n            //frappe.model.set_value(tax.doctype, tax.name, \"rate\", tax.rate);\n            \n            //frappe.model.set_value(cdt, cdn, \"tax_amount\", 0);\n            //frm.refresh_field(\"tax_amount\");\n        }\n    },\n    \n    tax_amount: function(frm, cdt, cdn) {\n        let tax = locals[cdt][cdn];\n        if (tax.charge_type === 'On Net Total') {\n            \n            let net_total = frm.doc.net_total || 1; // Avoid division by zero\n            let new_rate = (tax.tax_amount / net_total) * 100;\n    \n            // Update only the tax_rate field\n            frappe.model.set_value(cdt, cdn, \"rate\", new_rate);\n            frm.refresh_field(\"rate\"); // Refresh only tax_rate\n        }\n    }\n});",
  "view": "Form"
 }
]