[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-08-03 13:14:33.706073",
  "module": "Erpmco",
  "name": "Delivery Note Select Allocated Items",
  "script": "frappe.ui.form.on('Delivery Note', {\r\n    refresh(frm) {\r\n        frm.remove_custom_button(__('Sales Order'), __('Get Items From'));\r\n\r\n        frm.add_custom_button(__('Sales Order'), function () {\r\n            frappe.call({\r\n                method: 'erpmco.overrides.delivery_note.fetch_reserved_stock',\r\n                args: { customer: frm.doc.customer },\r\n                callback: function (response) {\r\n                    if (!response.message || response.message.length === 0) {\r\n                        frappe.msgprint(__('Aucune ligne réservée trouvée.'));\r\n                        return;\r\n                    }\r\n\r\n                    const raw_data = response.message;\r\n\r\n                    const dialog = new frappe.ui.Dialog({\r\n                        title: __('Sélection des articles réservés'),\r\n                        size: \"extra-large\",\r\n                        fields: [\r\n                            { fieldname: 'filters_section', fieldtype: 'Section Break', label: 'Filtres' },\r\n                            {\r\n                                fieldname: 'search_sales_order',\r\n                                fieldtype: 'Link',\r\n                                options: 'Sales Order',\r\n                                label: 'Sales Order',\r\n                                onchange: function () {\r\n                                    updateTree(dialog, raw_data);\r\n                                }\r\n                            },\r\n                            { fieldtype: 'Column Break' },\r\n                            {\r\n                                fieldname: 'search_item_code',\r\n                                fieldtype: 'Link',\r\n                                options: 'Item',\r\n                                label: 'Item Code',\r\n                                onchange: function () {\r\n                                    updateTree(dialog, raw_data);\r\n                                }\r\n                            },\r\n                            { fieldtype: 'Column Break' },\r\n                            {\r\n                                fieldname: 'search_item_name',\r\n                                fieldtype: 'Data',\r\n                                label: 'Item Name',\r\n                                onchange: function () {\r\n                                    updateTree(dialog, raw_data);\r\n                                }\r\n                            },\r\n                            { fieldtype: 'Section Break' },\r\n                            {\r\n                                fieldname: 'batch_treeview',\r\n                                fieldtype: 'HTML',\r\n                                label: 'Réservations groupées'\r\n                            }\r\n                        ],\r\n                        primary_action_label: __('Créer le bon de livraison'),\r\n                        primary_action: function () {\r\n                            let selected = [];\r\n\r\n                            dialog.$wrapper.find(\".reserved-line:checked\").each(function () {\r\n                                const $el = $(this);\r\n                                selected.push({\r\n                                    sales_order: $el.data(\"sales-order\"),\r\n                                    item_code: $el.data(\"item-code\"),\r\n                                    qty: $el.data(\"qty\"),\r\n                                    stock_qty: $el.data(\"stock-qty\"),\r\n                                    sales_order_item: $el.data(\"so-item\"),\r\n                                    stock_reservation_entry: $el.data(\"sre\"),\r\n                                    warehouse: $el.data(\"warehouse\"),\r\n                                    uom: $el.data(\"uom\"),\r\n                                    stock_uom: $el.data(\"stock-uom\"),\r\n                                    conversion_factor: $el.data(\"conversion-factor\")\r\n                                });\r\n                            });\r\n\r\n                            processSelectedBatches(frm, selected, dialog);\r\n                        }\r\n                    });\r\n\r\n                    updateTree(dialog, raw_data);\r\n                    dialog.show();\r\n\r\n                    dialog.fields_dict.search_sales_order.get_query = function () {\r\n                        return {\r\n                            filters: {\r\n                                customer: frm.doc.customer,\r\n                                status: ['not in', ['Closed', 'Completed']],\r\n                            }\r\n                        };\r\n                    };\r\n                }\r\n            });\r\n        }, __('Get Items From'));\r\n    }\r\n});\r\n\r\n\r\nfunction updateTree(dialog, data) {\r\n    const soFilter = dialog.get_value('search_sales_order')?.toLowerCase() || \"\";\r\n    const itemCodeFilter = dialog.get_value('search_item_code')?.toLowerCase() || \"\";\r\n    const itemNameFilter = dialog.get_value('search_item_name')?.toLowerCase() || \"\";\r\n\r\n    const filtered = data.filter(row =>\r\n        (!soFilter || row.sales_order.toLowerCase().includes(soFilter)) &&\r\n        (!itemCodeFilter || row.item_code.toLowerCase().includes(itemCodeFilter)) &&\r\n        (!itemNameFilter || row.item_name?.toLowerCase().includes(itemNameFilter))\r\n    );\r\n\r\n    const grouped = {};\r\n    filtered.forEach(row => {\r\n        if (!grouped[row.sales_order]) grouped[row.sales_order] = [];\r\n        grouped[row.sales_order].push(row);\r\n    });\r\n\r\n    let html = `\r\n        <div style=\"margin-bottom: 10px;\">\r\n            <button class=\"btn btn-xs btn-primary\" id=\"toggle-all-tree\">Tout sélectionner</button>\r\n            <span id=\"selection-count\" style=\"margin-left: 10px;\"></span>\r\n        </div>\r\n        <div class='treeview-container'>\r\n    `;\r\n\r\n    for (let so in grouped) {\r\n        const group_id = `group-${so}`;\r\n        html += `<details>\r\n            <summary>\r\n                <label>\r\n                    <input type=\"checkbox\" class=\"so-group-checkbox\" data-group=\"${group_id}\" />\r\n                    <b>${so}</b>\r\n                </label>\r\n            </summary>\r\n            <ul style=\"list-style: none; padding-left: 1em;\" id=\"${group_id}\">`;\r\n\r\n        grouped[so].forEach((item, idx) => {\r\n            const checkboxId = `${so}-${idx}`;\r\n            html += `<li>\r\n                <label>\r\n                    <input type=\"checkbox\" class=\"reserved-line ${group_id}\"\r\n                        data-sales-order=\"${item.sales_order}\"\r\n                        data-item-code=\"${item.item_code}\"\r\n                        data-qty=\"${item.qty}\"\r\n                        data-stock-qty=\"${item.stock_qty}\"\r\n                        data-so-item=\"${item.sales_order_item}\"\r\n                        data-sre=\"${item.stock_reservation_entry}\"\r\n                        data-warehouse=\"${item.warehouse}\"\r\n                        data-uom=\"${item.custom_uom}\"\r\n                        data-stock-uom=\"${item.stock_uom}\"\r\n                        data-conversion-factor=\"${item.custom_conversion_factor}\"\r\n                        id=\"${checkboxId}\"\r\n                    />\r\n                    ${item.item_code} - ${item.item_name} - ${item.qty} ${item.custom_uom}\r\n                </label>\r\n            </li>`;\r\n        });\r\n\r\n        html += `</ul></details>`;\r\n    }\r\n\r\n    html += \"</div>\";\r\n    dialog.fields_dict.batch_treeview.$wrapper.html(html);\r\n\r\n    const style = document.createElement('style');\r\n    style.innerHTML = `\r\n.treeview-container details { margin-bottom: 10px; }\r\n.treeview-container summary {\r\n    cursor: pointer;\r\n    font-size: 14px;\r\n    background: #f0f0f0;\r\n    padding: 5px;\r\n    border-radius: 4px;\r\n}\r\n.treeview-container li { margin: 5px 0; }\r\n    `;\r\n    document.head.appendChild(style);\r\n\r\n    let allSelected = false;\r\n    dialog.$wrapper.find(\"#toggle-all-tree\").off().on(\"click\", function () {\r\n        allSelected = !allSelected;\r\n        dialog.$wrapper.find(\".reserved-line, .so-group-checkbox\").prop(\"checked\", allSelected);\r\n        $(this).text(allSelected ? \"Tout désélectionner\" : \"Tout sélectionner\");\r\n        updateSelectionCount(dialog);\r\n    });\r\n\r\n    dialog.$wrapper.find(\".so-group-checkbox\").off().on(\"change\", function () {\r\n        const group_class = $(this).data(\"group\");\r\n        const checked = $(this).prop(\"checked\");\r\n        dialog.$wrapper.find(`.${group_class}`).prop(\"checked\", checked);\r\n        updateSelectionCount(dialog);\r\n    });\r\n\r\n    dialog.$wrapper.find(\".reserved-line\").off().on(\"change\", function () {\r\n        const group_class = $(this).attr(\"class\").split(\" \").find(c => c.startsWith(\"group-\"));\r\n        const $group_lines = dialog.$wrapper.find(`.${group_class}`);\r\n        const $group_checkbox = dialog.$wrapper.find(`.so-group-checkbox[data-group=\"${group_class}\"]`);\r\n        const all_checked = $group_lines.length > 0 && $group_lines.filter(\":checked\").length === $group_lines.length;\r\n        $group_checkbox.prop(\"checked\", all_checked);\r\n        updateSelectionCount(dialog);\r\n    });\r\n\r\n    updateSelectionCount(dialog);\r\n}\r\n\r\nfunction updateSelectionCount(dialog) {\r\n    const count = dialog.$wrapper.find(\".reserved-line:checked\").length;\r\n    dialog.$wrapper.find(\"#selection-count\").text(`${count} ligne${count > 1 ? \"s\" : \"\"} sélectionnée${count > 1 ? \"s\" : \"\"}`);\r\n}\r\n\r\nfunction processSelectedBatches(frm, selected_batches, dialog) {\r\n    if (selected_batches && selected_batches.length > 0) {\r\n        frappe.call({\r\n            method: 'erpmco.overrides.delivery_note.get_delivery_note_items_from_reserved_stock',\r\n            args: { doc: cur_frm.doc, details: selected_batches },\r\n            callback: function (r) {\r\n                if (r.message) {\r\n                    const { items, taxes_and_charges, taxes } = r.message;\r\n\r\n                    frm.clear_table('items');\r\n\r\n                    items.forEach((item) => {\r\n                        const row = frm.add_child('items');\r\n                        Object.keys(item).forEach((key) => {\r\n                            row[key] = item[key];\r\n                        });\r\n                    });\r\n\r\n                    if (taxes_and_charges) {\r\n                        frm.set_value('taxes_and_charges', taxes_and_charges);\r\n                        frm.clear_table('taxes');\r\n                        taxes.forEach((tax) => {\r\n                            const row = frm.add_child('taxes');\r\n                            Object.keys(tax).forEach((key) => {\r\n                                row[key] = tax[key];\r\n                            });\r\n                        });\r\n                        frm.refresh_field('taxes');\r\n                    }\r\n\r\n                    frm.refresh_field('items');\r\n                    dialog.hide();\r\n                    frappe.msgprint(__('Articles ajoutés au bon de livraison.'));\r\n                } else {\r\n                    frappe.msgprint(__('Échec lors de la récupération des articles.'));\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        frappe.msgprint(__('Aucune ligne sélectionnée.'));\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2025-02-07 13:04:29.572123",
  "module": "Erpmco",
  "name": "Work Order Get Stock Quantity",
  "script": "frappe.ui.form.on('Work Order', {\r\n    production_item: function (frm) {\r\n        // Fetch the item group for the selected production_item and set custom_manufacture_uom\r\n        if (frm.doc.production_item) {\r\n            frappe.db.get_value('Item', frm.doc.production_item, 'item_group', (r) => {\r\n                if (r && r.item_group) {\r\n                    // Check if the item group is \"FG\"\r\n                    if (r.item_group === 'FG' && !(frm.doc.item_name.toLowerCase().includes('loose') || frm.doc.item_name.includes('PFAD90RPKO10'))) {\r\n                        frm.set_value('custom_manufacture_uom', 'CT'); // Set to \"CT\" for FG\r\n                    } \r\n                    else {\r\n                        // Set to stock_uom for other item groups\r\n                        frappe.db.get_value('Item', frm.doc.production_item, 'stock_uom', (uom) => {\r\n                            if (uom && uom.stock_uom) {\r\n                                frm.set_value('custom_manufacture_uom', uom.stock_uom);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n    custom_qty_manufacture_: function (frm) {\r\n        if (frm.doc.custom_qty_manufacture_ && frm.doc.custom_manufacture_uom && frm.doc.production_item) {\r\n            frappe.call({\r\n                method: 'erpmco.overrides.work_order.get_converted_qty',\r\n                args: {\r\n                    item_code: frm.doc.production_item,\r\n                    uom: frm.doc.custom_manufacture_uom,\r\n                    qty: frm.doc.custom_qty_manufacture_\r\n                },\r\n                callback: function (r) {\r\n                    if (r.message) {\r\n                        frm.set_value('qty', r.message); // Set the converted qty\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2024-12-15 04:49:16.176329",
  "module": "Erpmco",
  "name": "Stock Entry Set Weight",
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\nfrappe.ui.form.on('Stock Entry Detail', {\n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.item_code) {\n            frappe.db.get_doc('Item', row.item_code)\n                .then(item_doc => {\n                    row.custom_weight_per_unit = item_doc.weight_per_unit;\n                    row.custom_weight_uom = item_doc.custom_weight_uom;\n                });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2024-12-31 16:43:46.522473",
  "module": "Erpmco",
  "name": "Work Order Fetch Operations",
  "script": "frappe.ui.form.on('Work Order', {\n\tcustom_routing_name: function (frm) {\n        if (frm.doc.custom_routing_name) {\n            frappe.call({\n                method: \"erpmco.overrides.work_order.fetch_operations\",\n                args: {\n                    routing_name: frm.doc.custom_routing_name\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.clear_table(\"operations\");\n                        r.message.forEach((row) => {\n                            let child = frm.add_child(\"operations\");\n                            child.operation = row.operation;\n                            child.workstation = row.workstation;\n                            child.time_in_mins = row.time_in_mins * frm.doc.qty;\n                            child.bom = frm.doc.bom_no;\n                        });\n                        frm.refresh_field(\"operations\");\n                    }\n                }\n            });\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-02-13 17:58:16.671780",
  "module": "Erpmco",
  "name": "Make Rate and Taxe Amount editable",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('Purchase Taxes and Charges', {\n    charge_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.charge_type === 'On Net Total') {\n            // Open row editor and enable fields\n            let grid_row = frm.fields_dict[\"taxes\"].grid.get_row(cdn);\n            if (grid_row) {\n                grid_row.toggle_editable(\"rate\", true);\n                grid_row.toggle_editable(\"tax_amount\", true);\n            }\n            \n            //frappe.model.set_value(tax.doctype, tax.name, \"rate\", tax.rate);\n            \n            //frappe.model.set_value(cdt, cdn, \"tax_amount\", 0);\n            //frm.refresh_field(\"tax_amount\");\n        }\n    },\n    \n    tax_amount: function(frm, cdt, cdn) {\n        let tax = locals[cdt][cdn];\n        if (tax.charge_type === 'On Net Total') {\n            \n            let net_total = frm.doc.net_total || 1; // Avoid division by zero\n            let new_rate = (tax.tax_amount / net_total) * 100;\n    \n            // Update only the tax_rate field\n            frappe.model.set_value(cdt, cdn, \"rate\", new_rate);\n            frm.refresh_field(\"rate\"); // Refresh only tax_rate\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-02-13 18:03:31.133203",
  "module": "Erpmco",
  "name": "Purchase Invoice Make Rate and Taxe Amount editable",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('Purchase Taxes and Charges', {\n    charge_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.charge_type === 'On Net Total') {\n            // Open row editor and enable fields\n            let grid_row = frm.fields_dict[\"taxes\"].grid.get_row(cdn);\n            if (grid_row) {\n                grid_row.toggle_editable(\"rate\", true);\n                grid_row.toggle_editable(\"tax_amount\", true);\n            }\n            \n            //frappe.model.set_value(tax.doctype, tax.name, \"rate\", tax.rate);\n            \n            //frappe.model.set_value(cdt, cdn, \"tax_amount\", 0);\n            //frm.refresh_field(\"tax_amount\");\n        }\n    },\n    \n    tax_amount: function(frm, cdt, cdn) {\n        let tax = locals[cdt][cdn];\n        if (tax.charge_type === 'On Net Total') {\n            \n            let net_total = frm.doc.net_total || 1; // Avoid division by zero\n            let new_rate = (tax.tax_amount / net_total) * 100;\n    \n            // Update only the tax_rate field\n            frappe.model.set_value(cdt, cdn, \"rate\", new_rate);\n            frm.refresh_field(\"rate\"); // Refresh only tax_rate\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-02-13 18:05:52.593712",
  "module": "Erpmco",
  "name": "Purchase Order Make Rate and Taxe Amount editable",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('Purchase Taxes and Charges', {\n    charge_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.charge_type === 'On Net Total') {\n            // Open row editor and enable fields\n            let grid_row = frm.fields_dict[\"taxes\"].grid.get_row(cdn);\n            if (grid_row) {\n                grid_row.toggle_editable(\"rate\", true);\n                grid_row.toggle_editable(\"tax_amount\", true);\n            }\n            \n            //frappe.model.set_value(tax.doctype, tax.name, \"rate\", tax.rate);\n            \n            //frappe.model.set_value(cdt, cdn, \"tax_amount\", 0);\n            //frm.refresh_field(\"tax_amount\");\n        }\n    },\n    \n    tax_amount: function(frm, cdt, cdn) {\n        let tax = locals[cdt][cdn];\n        if (tax.charge_type === 'On Net Total') {\n            \n            let net_total = frm.doc.net_total || 1; // Avoid division by zero\n            let new_rate = (tax.tax_amount / net_total) * 100;\n    \n            // Update only the tax_rate field\n            frappe.model.set_value(cdt, cdn, \"rate\", new_rate);\n            frm.refresh_field(\"rate\"); // Refresh only tax_rate\n        }\n    }\n});",
  "view": "Form"
 }
]